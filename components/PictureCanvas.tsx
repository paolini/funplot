import { useState, useEffect } from "react"

import { get, set, update, State } from "@/lib/State"
import { draw } from '@/lib/funplot'
import Coords from "@/lib/Coords"
import { Axes, ContextWrapper } from "@/lib/plot"
import { Picture } from "@/lib/picture"
import Canvas from "./Canvas"

/**
 * Draws a Picture generated by @picture which might
 * be slow to compute. So it uses a cache and timeout
 * to avoid blocking the user interface.
 */
export default function PictureCanvas({axes, width=640, height=480, picture, click, move}:{
    axes: State<Axes>
    width?: number
    height?: number
    click?: (coords: Coords) => void
    move?: (coords: Coords) => void
    picture: (ctx: ContextWrapper) => Promise<Picture>
}) {
    const [pending, setPending] = useState<{timeout: NodeJS.Timeout|null}>({timeout: null})
    const [pictureCache,setPictureCache]=useState<Picture|null>(null)
    const updateCount = useState<number>(1)
    const drawCount = useState<number>(0)

    useEffect(() => {
        // console.log("changed!")
        update(updateCount, count => count+1)
    }, [get(axes),picture])

    return <Canvas 
        width={width} 
        height={height}
        axes={axes} 
        plot={plot}
        click={click}
        move={move}
    />

    async function plot(ctx: ContextWrapper) {
        // console.log('plot!')
        if (pictureCache !== null) {
            draw(ctx, pictureCache, {labels:{x:'c',y:'x'}})
        }
        if (get(updateCount)!==get(drawCount)) {
            if (pending.timeout) clearTimeout(pending.timeout)
            // constant violation on purpose
            pending.timeout = setTimeout(async () => {
                // console.log('recompute')
                setPictureCache(await picture(ctx))
                set(drawCount, get(updateCount))
            }, 100)
        }
    }
}