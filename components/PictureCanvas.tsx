import { useState, useEffect, useCallback } from "react"
import useResizeObserver from '@/lib/useResizeObserver'

import { get, set, update, State } from "@/lib/State"
import { draw } from '@/lib/funplot'
import Coords from "@/lib/Coords"
import { Axes, ContextWrapper } from "@/lib/plot"
import { Picture } from "@/lib/picture"
import Canvas from "./Canvas"

/**
 * Draws a Picture generated by @picture which might
 * be slow to compute. So it uses a cache and timeout
 * to avoid blocking the user interface.
 */
export default function PictureCanvas({axes, picture, click, move}:{
    axes: State<Axes>|Axes
    click?: (coords: Coords) => void
    move?: (coords: Coords) => void
    picture: (ctx: ContextWrapper) => Promise<Picture>
}) {
    const [pending, setPending] = useState<{timeout: NodeJS.Timeout|null}>({timeout: null})
    const [pictureCache,setPictureCache]=useState<Picture|null>(null)
    const updateCount = useState<number>(1)
    const drawCount = useState<number>(0)
    const onResize = useCallback((target: HTMLDivElement) => {
        // Handle the resize event
        console.log("resize")
        update(updateCount, count => count+1)
        if (Array.isArray(axes)) {
            const w = target.clientWidth
            const h = target.clientHeight
            const a = get(axes)
            const d = Math.sqrt((a.rx*a.rx + a.ry*a.ry)/(w*w+h*h))
            set(axes, {
                x: a.x,
                y: a.y,
                rx: w*d,
                ry: h*d,
            })
            }
        }, []);
    const resizeRef = useResizeObserver(onResize);

    console.log(`PictureCanvas ${get(updateCount)}`)

    useEffect(() => {
        console.log("changed!")
        update(updateCount, count => count+1)
    }, [Array.isArray(axes) && get(axes),picture])

    return <div style={{resize:"both",overflow:"auto",width:"fit-content"}}
                ref={resizeRef}
            >
        <Canvas 
            axes={axes} 
            plot={plot}
            click={click}
            move={move}
            updateCount={get(updateCount)}
        />
    </div>

    async function plot(ctx: ContextWrapper) {
        console.log('plot!')
        if (pictureCache !== null) {
            draw(ctx, pictureCache, {labels:{x:'c',y:'x'}})
        }
        if (get(updateCount)!==get(drawCount)) {
            if (pending.timeout) clearTimeout(pending.timeout)
            // constant violation on purpose
            pending.timeout = setTimeout(async () => {
                // console.log('recompute')
                setPictureCache(await picture(ctx))
                set(drawCount, get(updateCount))
            }, 100)
        }
    }
}